openapi: 3.0.0
info:
  title: Norruva DPP API
  version: v1
  description: Conceptual API endpoints for managing Digital Product Passports.
paths:
  /api/v1/dpp/{productId}:
    get:
      operationId: getDppById
      summary: Retrieve a Digital Product Passport
      description: Fetches the complete Digital Product Passport for a specific product.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateDpp
      summary: Update a Digital Product Passport
      description: Updates an existing Digital Product Passport. You can send partial or full updates.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the DPP to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDppRequestBody'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: archiveDpp
      summary: Archive a Digital Product Passport
      description: Archives an existing Digital Product Passport by setting its status to 'archived'.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the DPP to archive.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product with ID DPP001 has been archived successfully.
                  status:
                    type: string
                    example: Archived
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp:
    get:
      operationId: listDpps
      summary: List Digital Product Passports
      description: Retrieves a list of DPPs, with optional filtering.
      parameters:
        - name: status
          in: query
          required: false
          description: Filter by DPP status (e.g., draft, published, archived).
          schema:
            type: string
            enum: ["draft", "published", "archived", "pending_review", "revoked", "flagged", "all"]
            default: "all"
        - name: category
          in: query
          required: false
          description: Filter by product category.
          schema:
            type: string
        - name: searchQuery
          in: query
          required: false
          description: Search term for product name, ID, GTIN, or manufacturer.
          schema:
            type: string
        - name: blockchainAnchored
          in: query
          required: false
          description: Filter by blockchain anchoring status.
          schema:
            type: string
            enum: ["all", "anchored", "not_anchored"]
            default: "all"
        # Conceptual pagination parameters
        # - name: limit
        #   in: query
        #   schema:
        #     type: integer
        #     default: 20
        # - name: offset
        #   in: query
        #   schema:
        #     type: integer
        #     default: 0
      responses:
        '200':
          description: A list of Digital Product Passports.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/DigitalProductPassport' # Or a summary version
                  filtersApplied:
                    type: object
                  totalCount:
                    type: integer
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      operationId: createDpp
      summary: Create a Digital Product Passport
      description: Creates a new Digital Product Passport with the provided initial data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDppRequestBody'
      responses:
        '201':
          description: Successful creation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/extend/{productId}:
    patch:
      operationId: extendDpp
      summary: Extend a Digital Product Passport
      description: Allows for extending a DPP by adding document references or other modular data.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the DPP to extend.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                documentReference:
                  type: object
                  properties:
                    documentName:
                      type: string
                      description: Name of the document.
                    documentUrl:
                      type: string
                      format: url
                      description: URL to access the document.
                    documentType:
                      type: string
                      description: Type of the document (e.g., "Compliance Certificate", "Technical Manual").
                  required:
                    - documentName
                    - documentUrl
                    - documentType
                chainOfCustodyUpdate: # Conceptual - further definition needed for real use
                  type: object
                  description: "Conceptual: For updating chain of custody information."
                  properties:
                    newOwnerDid:
                      type: string
                    transferTimestamp:
                      type: string
                      format: date-time
      responses:
        '200':
          description: Successful extension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport' # Returns the updated DPP
        '400':
          description: Invalid input data (e.g., missing documentReference).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/custody/{productId}:
    patch:
      operationId: updateCustody
      summary: Update chain of custody
      description: Appends a new custodian entry to the DPP traceability information.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the DPP to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                stepName:
                  type: string
                actorDid:
                  type: string
                  description: Decentralized identifier of the actor.
                timestamp:
                  type: string
                  format: date-time
                location:
                  type: string
                  nullable: true
                transactionHash:
                  type: string
                  nullable: true
              required:
                - stepName
                - actorDid
                - timestamp
      responses:
        '200':
          description: Returns the updated DPP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/{productId}/lifecycle-events:
    post:
      operationId: addDppLifecycleEvent
      summary: Add a Lifecycle Event to a DPP
      description: Adds a new lifecycle event to the specified Digital Product Passport.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventType:
                  type: string
                  description: Type of the lifecycle event (e.g., "Manufactured", "Shipped").
                  example: "Shipped"
                location:
                  type: string
                  nullable: true
                  description: Location where the event occurred.
                  example: "Warehouse B"
                details:
                  type: object
                  additionalProperties: true
                  nullable: true
                  description: Custom data related to the event.
                  example: {"orderId": "SO12345"}
                responsibleParty:
                  type: string
                  nullable: true
                  description: Party responsible for the event.
                  example: "Logistics Inc."
              required:
                - eventType
      responses:
        '201':
          description: Lifecycle event added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LifecycleEvent'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/{productId}/compliance-summary:
    get:
      operationId: getDppComplianceSummary
      summary: Retrieve Compliance Summary for a DPP
      description: Fetches a summary of the compliance status for a specific product.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                  productName:
                    type: string
                  overallStatus:
                    type: string
                    enum: ["Fully Compliant", "Pending Review", "Non-Compliant", "Review Needed", "N/A", "No Data"]
                  eprelStatus:
                    type: string
                    nullable: true
                  ebsiVerificationStatus:
                    type: string
                    nullable: true
                  batteryRegulationStatus:
                    type: string
                    nullable: true
                  esprStatus:
                    type: string
                    nullable: true
                  scipStatus:
                    type: string
                    nullable: true
                  customsDataStatus:
                    type: string
                    nullable: true
                  lastChecked:
                    type: string
                    format: date-time
                  details:
                    type: object
                    properties:
                      eprel:
                        type: object
                        nullable: true
                        properties:
                          id: { type: string, nullable: true }
                          status: { type: string }
                          url: { type: string, nullable: true }
                          lastChecked: { type: string, format: "date-time"}
                      ebsi:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                          verificationId: { type: string, nullable: true }
                          transactionUrl: { type: string, nullable: true }
                          lastChecked: { type: string, format: "date-time" }
                      batteryRegulation:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                      esprConformity:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                      euEspr:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                      usScope3:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                      scipNotification:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                          notificationId: { type: string, nullable: true }
                          lastChecked: { type: string, format: "date-time" }
                      euCustomsData:
                        type: object
                        nullable: true
                        properties:
                          status: { type: string }
                          declarationId: { type: string, nullable: true }
                          lastChecked: { type: string, format: "date-time" }
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/{productId}/credential:
    get:
      operationId: getDppCredential
      summary: Retrieve Verifiable Credential for a DPP
      description: Returns a verifiable credential (VC) representation of the Digital Product Passport for the specified product.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DppCredential'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/verify/{productId}:
    post:
      operationId: verifyDppById
      summary: Verify a Digital Product Passport
      description: Performs compliance and authenticity checks on a specific DPP.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product to verify.
          schema:
            type: string
      responses:
        '200':
          description: Verification result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
                  verificationStatus:
                    type: string
                    enum: ["Verified", "VerificationFailed", "PendingFurtherChecks", "ProductNotFound"]
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  checksPerformed:
                    type: array
                    items:
                      type: string
                    example: ["Mock Data Integrity Check", "Mock EBSI Anchor Verification"]
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/anchor/{productId}:
    post:
      operationId: anchorDpp
      summary: Anchor a Digital Product Passport
      description: Creates a blockchain anchor for the specified DPP.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product to anchor.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                platform:
                  type: string
                  description: Blockchain or anchoring platform name.
              required:
                - platform
      responses:
        '200':
          description: DPP anchored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/history/{productId}:
    get:
      operationId: getDppHistoryById
      summary: Retrieve History/Audit Trail for a DPP
      description: Fetches the history of changes and events for a specific Digital Product Passport.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryEntry'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/import:
    post:
      operationId: importDpps
      summary: Batch Import Digital Product Passports
      description: Allows for batch creation or update of DPPs from an uploaded file or data payload.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fileType:
                  type: string
                  description: Type of the import file (e.g., "csv", "json").
                  example: "csv"
                data: 
                  type: string
                  description: The data to import (e.g., base64 string of file content or structured JSON data).
                  example: "UEsDBAoAAAAA..." 
                sourceDescription:
                  type: string
                  nullable: true
                  description: Optional description of the import source.
              required:
                - fileType
                - data
      responses:
        '200': 
          description: Import job acknowledged or completed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
                    enum: ["PendingProcessing", "Completed", "Failed"]
                  jobId:
                    type: string
                    nullable: true
                  fileTypeReceived:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Invalid input data (e.g., missing fileType or data).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error during import.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/import/jobs/{jobId}:
    get:
      operationId: getImportJobStatus
      summary: Retrieve Batch Import Job Status
      description: Returns the current status of a batch import job.
      parameters:
        - name: jobId
          in: path
          required: true
          description: Identifier of the import job.
          schema:
            type: string
      responses:
        '200':
          description: Current status information.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobId:
                    type: string
                  status:
                    type: string
                    enum: ["PendingProcessing", "Completed", "Failed"]
                  message:
                    type: string
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Job not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/graph/{productId}:
    get:
      operationId: getDppGraphData
      summary: Retrieve Graph Data for a DPP
      description: Fetches graph data (nodes and edges) for visualizing the supply chain or lifecycle related to a DPP.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DppGraphResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/status/{productId}:
    get:
      operationId: getDppStatusById
      summary: Retrieve the Status of a Digital Product Passport
      description: Fetches the current status of a specific Digital Product Passport.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DppStatusResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      '500':
        description: Internal server error.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorResponse'
  /api/v1/dpp/transfer-ownership/{productId}:
    post:
      operationId: transferDppOwnership
      summary: Transfer Ownership of a Digital Product Passport
      description: Updates ownership information for the specified DPP.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newOwner:
                  type: object
                  properties:
                    name:
                      type: string
                    did:
                      type: string
                      nullable: true
                transferTimestamp:
                  type: string
                  format: date-time
              required:
                - newOwner
                - transferTimestamp
      responses:
        '200':
          description: Ownership transferred successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dpp/{productId}/issue-auth-vc:
    post:
      operationId: issueDppAuthVc
      summary: Issue Authentication Verifiable Credential for a DPP
      description: Conceptually issues an authentication Verifiable Credential (VC) for the specified product and associates its ID with the DPP.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      responses:
        '200':
          description: Authentication VC conceptually issued and linked.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Authentication VC conceptually issued for product DPP001."
                  productId:
                    type: string
                  authenticationVcId:
                    type: string
                    example: "vc_auth_DPP001_mock123"
                  updatedProduct:
                    $ref: '#/components/schemas/DigitalProductPassport'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/dpp/{productId}/link-nft:
    post:
      operationId: linkDppOwnershipNft
      summary: Link Ownership NFT to a DPP
      description: Conceptually links an NFT representing product ownership to the specified Digital Product Passport.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnershipNftLinkRequestBody'
      responses:
        '200':
          description: Ownership NFT conceptually linked to the DPP.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Ownership NFT conceptually linked for product DPP001."
                  productId:
                    type: string
                  ownershipNftLink:
                    $ref: '#/components/schemas/OwnershipNftLink'
                  updatedProduct:
                    $ref: '#/components/schemas/DigitalProductPassport'
        '400':
          description: Invalid input data (e.g., missing contractAddress or tokenId).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: API key missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /api/v1/dpp/{productId}/onchain-status:
    post:
      operationId: updateDppOnChainStatus
      summary: Update DPP On-Chain Status (Conceptual)
      description: Conceptually updates the on-chain status of a Digital Product Passport.
      parameters:
        - name: productId
          in: path
          required: true
          description: The unique identifier of the product.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOnChainStatusRequest'
      responses:
        '200':
          description: On-chain status conceptually updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updatedProduct:
                    $ref: '#/components/schemas/DigitalProductPassport'
                example:
                  message: "Conceptual on-chain status for product DPP001 updated to 'active'. Mock Tx: 0xmock_tx_hash_123"
                  updatedProduct: 
                    $ref: '#/components/schemas/DigitalProductPassport/example' 